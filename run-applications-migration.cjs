const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing environment variables. Please check your .env.local file.')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

const migrationSQL = `
-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã applications –¥–ª—è –∑–∞—è–≤–æ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä—ã
CREATE TABLE IF NOT EXISTS applications (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  tender_id UUID NOT NULL REFERENCES tenders(id) ON DELETE CASCADE,
  contractor_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  proposal TEXT NOT NULL,
  status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'rejected')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_applications_tender_id ON applications(tender_id);
CREATE INDEX IF NOT EXISTS idx_applications_contractor_id ON applications(contractor_id);
CREATE INDEX IF NOT EXISTS idx_applications_status ON applications(status);
CREATE INDEX IF NOT EXISTS idx_applications_created_at ON applications(created_at);

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Row Level Security (RLS)
ALTER TABLE applications ENABLE ROW LEVEL SECURITY;

-- –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
DROP POLICY IF EXISTS "Contractors can view own applications" ON applications;
DROP POLICY IF EXISTS "Clients can view applications on their tenders" ON applications;
DROP POLICY IF EXISTS "Contractors can create applications" ON applications;
DROP POLICY IF EXISTS "Clients can update application status" ON applications;
DROP POLICY IF EXISTS "Contractors can delete own pending applications" ON applications;

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
CREATE POLICY "Contractors can view own applications" ON applications
  FOR SELECT USING (contractor_id = auth.uid());

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤: –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–≤–æ–∏ —Ç–µ–Ω–¥–µ—Ä—ã
CREATE POLICY "Clients can view applications on their tenders" ON applications
  FOR SELECT USING (
    tender_id IN (
      SELECT id FROM tenders WHERE client_id = auth.uid()
    )
  );

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫: –ø–æ–¥—Ä—è–¥—á–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏
CREATE POLICY "Contractors can create applications" ON applications
  FOR INSERT WITH CHECK (contractor_id = auth.uid());

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–≤–æ–∏ —Ç–µ–Ω–¥–µ—Ä—ã
CREATE POLICY "Clients can update application status" ON applications
  FOR UPDATE USING (
    tender_id IN (
      SELECT id FROM tenders WHERE client_id = auth.uid()
    )
  );

-- –ü–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: –ø–æ–¥—Ä—è–¥—á–∏–∫–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å pending)
CREATE POLICY "Contractors can delete own pending applications" ON applications
  FOR DELETE USING (
    contractor_id = auth.uid() AND status = 'pending'
  );

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_applications_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS applications_updated_at_trigger ON applications;
CREATE TRIGGER applications_updated_at_trigger
  BEFORE UPDATE ON applications
  FOR EACH ROW
  EXECUTE FUNCTION update_applications_updated_at();

-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –æ–¥–∏–Ω –ø–æ–¥—Ä—è–¥—á–∏–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE constraint_name = 'unique_contractor_tender' 
    AND table_name = 'applications'
  ) THEN
    ALTER TABLE applications ADD CONSTRAINT unique_contractor_tender 
      UNIQUE (tender_id, contractor_id);
  END IF;
END $$;
`

async function runMigration() {
  try {
    console.log('üöÄ Starting applications table migration...')
    
    const { data, error } = await supabase.rpc('exec_sql', { 
      sql: migrationSQL 
    })
    
    if (error) {
      console.error('‚ùå Migration failed:', error)
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å
      console.log('üîÑ Trying alternative approach...')
      const { error: altError } = await supabase
        .from('applications')
        .select('id')
        .limit(1)
      
      if (altError && altError.code === '42P01') {
        console.log('üìã Table does not exist. Please run this SQL in Supabase SQL Editor:')
        console.log('\n' + '='.repeat(80))
        console.log(migrationSQL)
        console.log('='.repeat(80) + '\n')
      } else {
        console.log('‚úÖ Table already exists or migration completed')
      }
    } else {
      console.log('‚úÖ Migration completed successfully!')
    }
    
  } catch (error) {
    console.error('‚ùå Unexpected error:', error)
    console.log('\nüìã Please run this SQL in Supabase SQL Editor:')
    console.log('\n' + '='.repeat(80))
    console.log(migrationSQL)
    console.log('='.repeat(80) + '\n')
  }
}

runMigration() 