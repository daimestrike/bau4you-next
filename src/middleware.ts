// MIDDLEWARE –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
// 
// –ü—Ä–æ–±–ª–µ–º—ã –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞–µ–º:
// 1. –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
// 2. –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å client-side –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
// 3. –°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å–µ—Å—Å–∏–π
//
// TODO: –í–∫–ª—é—á–∏—Ç—å middleware –ø–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

/*
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

// –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const publicRoutes = ['/', '/login', '/register', '/companies', '/products', '/tenders', '/search']

// –ú–∞—Ä—à—Ä—É—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ—Å—Ç–µ–π (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
const guestOnlyRoutes = ['/login', '/register']

// –ú–∞—Ä—à—Ä—É—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const protectedRoutes = [
  '/profile',
  '/dashboard', 
  '/tenders/create', 
  '/products/create', 
  '/products/manage',
  '/projects',
  '/projects/create',
  '/companies/create',
  '/orders',
  '/messages'
]

// –ú–∞—Ä—à—Ä—É—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminRoutes = ['/admin']

export async function middleware(request: NextRequest) {
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value
        },
        set(name: string, value: string, options) {
          request.cookies.set({
            name,
            value,
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          })
          response.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options) {
          request.cookies.set({
            name,
            value: '',
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          })
          response.cookies.set({
            name,
            value: '',
            ...options,
          })
        },
      },
    }
  )

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
  const { data: { user } } = await supabase.auth.getUser()

  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è debugging
  console.log('üîç Middleware - Path:', request.nextUrl.pathname)
  console.log('üîç Middleware - User:', user ? `${user.id} (${user.email})` : 'null')

  // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  const protectedPaths = ['/dashboard', '/commercial-proposals', '/commercial-proposal']
  const isProtectedPath = protectedPaths.some(path => 
    request.nextUrl.pathname.startsWith(path)
  )

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
  if (!user && isProtectedPath) {
    const redirectUrl = new URL('/login', request.url)
    redirectUrl.searchParams.set('redirect', request.nextUrl.pathname)
    console.log('üîí Middleware - Redirecting to login:', redirectUrl.toString())
    return NextResponse.redirect(redirectUrl)
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
  if (user && request.nextUrl.pathname === '/login') {
    const redirectUrl = new URL('/dashboard', request.url)
    console.log('‚úÖ Middleware - User already logged in, redirecting to dashboard')
    return NextResponse.redirect(redirectUrl)
  }

  return response
}
*/

// –ü—É—Å—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è Next.js
export const config = {
  // –û—Ç–∫–ª—é—á–∞–µ–º matcher –ø–æ–ª–Ω–æ—Å—Ç—å—é
  matcher: [],
} 