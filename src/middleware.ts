import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { createServerClient } from '@supabase/ssr'

// –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const publicRoutes = ['/', '/login', '/register', '/companies', '/products', '/tenders', '/search']

// –ú–∞—Ä—à—Ä—É—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ—Å—Ç–µ–π (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
const guestOnlyRoutes = ['/login', '/register']

// –ú–∞—Ä—à—Ä—É—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const protectedRoutes = [
  '/profile',
  '/dashboard', 
  '/tenders/create', 
  '/products/create', 
  '/products/manage',
  '/projects',
  '/projects/create',
  '/companies/create',
  '/orders',
  '/messages'
]

// –ú–∞—Ä—à—Ä—É—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminRoutes = ['/admin']

export async function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  if (
    pathname.startsWith('/_next') ||
    pathname.startsWith('/api') ||
    pathname.startsWith('/.well-known') ||
    pathname.includes('.') ||
    pathname === '/favicon.ico'
  ) {
    return NextResponse.next()
  }

  console.log(`[Middleware] Processing: ${pathname}`)

  // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Supabase
  let supabase
  try {
    supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return req.cookies.get(name)?.value
          },
          set() {
            // Middleware –Ω–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫—É–∫–∏
          },
          remove() {
            // Middleware –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫—É–∫–∏
          },
        },
      }
    )
  } catch (error) {
    console.error('[Middleware] Supabase client creation failed:', error)
    return NextResponse.next()
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
  let user = null
  try {
    const { data: { user: currentUser } } = await supabase.auth.getUser()
    user = currentUser
    console.log(`[Middleware] User check: ${user ? user.email : 'not authenticated'}`)
  } catch (error) {
    console.error('[Middleware] Auth check failed:', error)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  const isProtectedPath = protectedRoutes.some(route => pathname.startsWith(route))
  
  if (isProtectedPath && !user) {
    console.log(`[Middleware] Redirecting to login: ${pathname}`)
    const loginUrl = new URL('/login', req.url)
    loginUrl.searchParams.set('redirect', pathname)
    return NextResponse.redirect(loginUrl)
  }

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–æ–≥–∏–Ω–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥
  if ((pathname === '/login' || pathname === '/register') && user) {
    console.log(`[Middleware] Redirecting authenticated user to dashboard`)
    return NextResponse.redirect(new URL('/dashboard', req.url))
  }

  return NextResponse.next()
}

// üöß MIDDLEWARE –û–¢–ö–õ–Æ–ß–ï–ù –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò üöß
// 
// TODO: –í–∫–ª—é—á–∏—Ç—å middleware –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
// 
// –ß—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å:
// 1. –£–±—Ä–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —Ñ—É–Ω–∫—Ü–∏–∏ middleware
// 2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)']
// 3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
// 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
//
// –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ middleware –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
// ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
// ‚úÖ –õ–µ–≥–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
// ‚úÖ –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å hot reload
// ‚úÖ –ú–æ–∂–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

export const config = {
  matcher: [] // Middleware –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
} 