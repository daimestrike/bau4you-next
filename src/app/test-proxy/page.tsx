'use client'
import { useState } from 'react'

export default function TestProxyPage() {
  const [result, setResult] = useState<any>(null)
  const [loading, setLoading] = useState(false)

  const testDirectConnection = async () => {
    setLoading(true)
    try {
      console.log('üß™ Testing direct Supabase connection...')
      const response = await fetch('https://gcbwqqwmqjolxxrvfbzz.supabase.co/rest/v1/commercial_proposals?limit=1', {
        headers: {
          'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdjYndxcXdtcWpvbHh4cnZmYnp6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODA2OTUsImV4cCI6MjA2NDQ1NjY5NX0.l4MmmUaF6YmNRRcorzdx_YdgQZerqqoS86N_T3TX7io',
          'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdjYndxcXdtcWpvbHh4cnZmYnp6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODA2OTUsImV4cCI6MjA2NDQ1NjY5NX0.l4MmmUaF6YmNRRcorzdx_YdgQZerqqoS86N_T3TX7io',
          'content-type': 'application/json'
        }
      })
      
      const data = await response.json()
      setResult({ type: 'direct', success: response.ok, data, status: response.status })
      console.log('‚úÖ Direct connection result:', { success: response.ok, data, status: response.status })
    } catch (error) {
      console.error('‚ùå Direct connection error:', error)
      setResult({ type: 'direct', success: false, error: error instanceof Error ? error.message : 'Unknown error' })
    }
    setLoading(false)
  }

  const testProxyConnection = async () => {
    setLoading(true)
    try {
      console.log('üß™ Testing proxy connection...')
      const response = await fetch('/api/sb/rest/v1/commercial_proposals?limit=1', {
        headers: {
          'content-type': 'application/json'
        }
      })
      
      const data = await response.json()
      setResult({ type: 'proxy', success: response.ok, data, status: response.status })
      console.log('‚úÖ Proxy connection result:', { success: response.ok, data, status: response.status })
    } catch (error) {
      console.error('‚ùå Proxy connection error:', error)
      setResult({ type: 'proxy', success: false, error: error instanceof Error ? error.message : 'Unknown error' })
    }
    setLoading(false)
  }

  const testVPSProxy = async () => {
    setLoading(true)
    try {
      console.log('üß™ Testing VPS proxy connection...')
      const response = await fetch('https://api.bau4you.co/api/sb/rest/v1/commercial_proposals?limit=1', {
        headers: {
          'content-type': 'application/json'
        }
      })
      
      const data = await response.json()
      setResult({ type: 'vps-proxy', success: response.ok, data, status: response.status })
      console.log('‚úÖ VPS Proxy connection result:', { success: response.ok, data, status: response.status })
    } catch (error) {
      console.error('‚ùå VPS Proxy connection error:', error)
      setResult({ type: 'vps-proxy', success: false, error: error instanceof Error ? error.message : 'Unknown error' })
    }
    setLoading(false)
  }

  return (
    <div className="container mx-auto p-8">
      <h1 className="text-3xl font-bold mb-6">üß™ –¢–µ—Å—Ç Supabase Proxy</h1>
      
      <div className="space-y-4 mb-8">
        <button
          onClick={testDirectConnection}
          disabled={loading}
          className="bg-blue-500 text-white px-6 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
        >
          {loading ? '–¢–µ—Å—Ç–∏—Ä—É—é...' : '–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
        </button>
        
        <button
          onClick={testProxyConnection}
          disabled={loading}
          className="bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600 disabled:opacity-50 ml-4"
        >
          {loading ? '–¢–µ—Å—Ç–∏—Ä—É—é...' : '–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏'}
        </button>

        <button
          onClick={testVPSProxy}
          disabled={loading}
          className="bg-purple-500 text-white px-6 py-2 rounded hover:bg-purple-600 disabled:opacity-50 ml-4"
        >
          {loading ? '–¢–µ—Å—Ç–∏—Ä—É—é...' : '–¢–µ—Å—Ç VPS –ø—Ä–æ–∫—Å–∏'}
        </button>
      </div>

      {result && (
        <div className="bg-gray-100 p-4 rounded">
          <h2 className="text-xl font-semibold mb-4">
            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {result.type}
          </h2>
          
          <div className={`p-3 rounded mb-4 ${result.success ? 'bg-green-100 border border-green-300' : 'bg-red-100 border border-red-300'}`}>
            <div className="font-semibold">
              {result.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}
            </div>
            <div className="text-sm">
              –°—Ç–∞—Ç—É—Å: {result.status || 'N/A'}
            </div>
          </div>
          
          <pre className="bg-white p-4 rounded border overflow-auto max-h-96 text-sm">
            {JSON.stringify(result, null, 2)}
          </pre>
        </div>
      )}

      <div className="mt-8 p-4 bg-yellow-50 border border-yellow-200 rounded">
        <h3 className="font-semibold mb-2">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∞—Ö:</h3>
        <ul className="list-disc list-inside text-sm space-y-1">
          <li><strong>–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</strong> –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∫ Supabase API</li>
          <li><strong>–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏:</strong> –ß–µ—Ä–µ–∑ `/api/sb/` —Ä–æ—É—Ç –≤ Next.js</li>
          <li><strong>VPS –ø—Ä–æ–∫—Å–∏:</strong> –ß–µ—Ä–µ–∑ –≤–∞—à –¥–æ–º–µ–Ω api.bau4you.co</li>
        </ul>
      </div>
    </div>
  )
} 