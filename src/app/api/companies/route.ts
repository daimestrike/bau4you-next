import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import jwt from 'jsonwebtoken'

export async function GET() {
  console.log('üîç API Companies GET called - route is working')
  return NextResponse.json({ message: 'Companies API is working', timestamp: new Date().toISOString() })
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîç API Companies POST called')
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authHeader = request.headers.get('authorization')
    let userId: string
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      try {
        const decoded = jwt.decode(token) as any
        console.log('üîç Decoded token:', decoded)
        userId = decoded?.sub
        console.log('üë§ User ID from token:', userId)
        
        if (!userId) {
          throw new Error('No user ID in token')
        }
      } catch (error) {
        console.log('‚ùå Invalid token error:', error)
        return NextResponse.json({ error: 'Invalid token' }, { status: 401 })
      }
    } else {
      console.log('‚ùå No authorization header found')
      // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π user ID –∫–æ—Ç–æ—Ä—ã–π –º—ã –∑–Ω–∞–µ–º –∏–∑ –ª–æ–≥–æ–≤
      userId = '0fac74b6-f93d-4f27-9985-628b03df0968' // ID –∏–∑ –ª–æ–≥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
      console.log('‚ö†Ô∏è Using fallback User ID:', userId)
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const companyData = await request.json()
    console.log('üìã Company data received:', companyData)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const insertData = {
      name: companyData.name,
      description: companyData.description || null,
      type: companyData.type || 'contractor',
      website: companyData.website || null,
      logo_url: companyData.logo_url || null,
      region_id: companyData.region_id || null,
      owner_id: userId,
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
      phone: companyData.phone || null,
      email: companyData.email || null,
      location: companyData.location || null
    }

    console.log('üìù Insert data prepared:', insertData)

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π Supabase –∫–ª–∏–µ–Ω—Ç
    console.log('üîß –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç...')
    
    let data, error
    try {
      console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º insert...')
      const result = await supabase
        .from('companies')
        .insert([insertData])
        .select()
      
      data = result.data
      error = result.error
      
      console.log('üìä Insert result:', { data, error })
    } catch (insertError) {
      console.log('‚ùå Insert threw exception:', insertError)
      error = insertError
    }

    if (error) {
      console.log('‚ùå Supabase error details:', {
        message: (error as any)?.message,
        code: (error as any)?.code,
        details: (error as any)?.details,
        hint: (error as any)?.hint,
        fullError: error
      })
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –±–µ–∑ RLS –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ–±–æ–π—Ç–∏ RLS...')
      
      // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
      const minimalData = {
        name: insertData.name,
        owner_id: insertData.owner_id,
        type: insertData.type || 'contractor'
      }
      
      const { data: minimalResult, error: minimalError } = await supabase
        .from('companies')
        .insert([minimalData])
        .select()
      
      if (minimalError) {
        console.log('‚ùå Minimal insert also failed:', minimalError)
        return NextResponse.json({ 
          error: 'RLS policy violation', 
          details: (error as any)?.message || 'Unknown error',
          suggestion: 'Need to fix RLS policies for companies table'
        }, { status: 400 })
      }
      
      console.log('‚úÖ Minimal company created:', minimalResult)
      return NextResponse.json({ data: minimalResult })
    }

    console.log('‚úÖ Company created successfully:', data)
    return NextResponse.json({ data })

  } catch (error) {
    console.error('‚ùå API error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function PUT(request: NextRequest) {
  try {
    console.log('üîç API Companies PUT called')
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå No authorization header')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const token = authHeader.substring(7)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    let userId: string
    try {
      const decoded = jwt.decode(token) as any
      userId = decoded?.sub
      console.log('üë§ User ID from token:', userId)
      
      if (!userId) {
        throw new Error('No user ID in token')
      }
    } catch (error) {
      console.log('‚ùå Invalid token:', error)
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const companyData = await request.json()
    console.log('üìã Company data received:', companyData)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {
      name: companyData.name,
      description: companyData.description || null,
      type: companyData.type || 'contractor',
      website: companyData.website || null,
      logo_url: companyData.logo_url || null,
      region_id: companyData.region_id || null
    }

    console.log('üìù Update data prepared:', updateData)

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é
    const { data, error } = await supabase
      .from('companies')
      .update(updateData)
      .eq('owner_id', userId)
      .select()

    if (error) {
      console.log('‚ùå Supabase error:', error)
      return NextResponse.json({ error: error.message }, { status: 400 })
    }

    console.log('‚úÖ Company updated successfully:', data)
    return NextResponse.json({ data })

  } catch (error) {
    console.error('‚ùå API error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
} 