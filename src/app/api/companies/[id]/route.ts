import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import jwt from 'jsonwebtoken'

// PUT - –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const resolvedParams = await params;
  try {
    console.log('üîç API Companies PUT called for ID:', resolvedParams.id)
    
    const body = await request.json()
    console.log('üìã Company update data received:', body)

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ error: 'Authorization token required' }, { status: 401 })
    }

    const token = authHeader.substring(7)
    let userId: string

    try {
      const decoded = jwt.decode(token) as any
      userId = decoded?.sub
      console.log('üë§ User ID from token:', userId)
      
      if (!userId) {
        return NextResponse.json({ error: 'Invalid token' }, { status: 401 })
      }
    } catch (error) {
      console.error('‚ùå Token decode error:', error)
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })
    }

    // –£–±–∏—Ä–∞–µ–º updated_at –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å (–º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏)
    const { updated_at, ...cleanUpdates } = body

    console.log('üìù Update data prepared:', cleanUpdates)

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç —Å service role
    console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç...')
    const { data, error } = await supabase
      .from('companies')
      .update(cleanUpdates)
      .eq('id', resolvedParams.id)
      .eq('owner_id', userId) // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–ø–∞–Ω–∏–∏
      .select()
      .single()

    if (error) {
      console.error('‚ùå Database error:', error)
      return NextResponse.json({ error: 'Database error', details: error }, { status: 500 })
    }

    console.log('‚úÖ Company updated successfully:', data)
    return NextResponse.json({ data })
  } catch (error) {
    console.error('‚ùå API error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
} 