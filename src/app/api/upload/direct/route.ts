import { NextRequest, NextResponse } from 'next/server'
import { uploadFile, generateFileName, validateFile } from '@/lib/s3'
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

// CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

// Handle preflight requests
export async function OPTIONS(request: NextRequest) {
  return new Response(null, {
    status: 200,
    headers: corsHeaders,
  })
}

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
const validateJWTToken = async (token: string) => {
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è payload)
    const parts = token.split('.')
    if (parts.length !== 3) {
      console.log('üîç JWT: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π')
      return null
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è base64
    let payload = parts[1]
    while (payload.length % 4) {
      payload += '='
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º URL-safe —Å–∏–º–≤–æ–ª—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ base64
    payload = payload.replace(/-/g, '+').replace(/_/g, '/')
    
    const decodedPayload = JSON.parse(atob(payload))
    console.log('üîç JWT payload:', { 
      sub: decodedPayload.sub, 
      email: decodedPayload.email, 
      exp: decodedPayload.exp,
      iat: decodedPayload.iat 
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    const now = Math.floor(Date.now() / 1000)
    if (decodedPayload.exp && decodedPayload.exp < now) {
      console.log('‚è∞ Token expired')
      return null
    }
    
    return {
      id: decodedPayload.sub,
      email: decodedPayload.email
    }
  } catch (error) {
    console.log('üí• JWT validation error:', error)
    return null
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîç Upload API called')
    
    // –ü–æ–ª—É—á–∞–µ–º cookies –∏ headers –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const cookieHeader = request.headers.get('cookie')
    const authHeader = request.headers.get('authorization')
    console.log('üç™ Cookie header:', cookieHeader ? 'present' : 'missing')
    console.log('üîë Auth header:', authHeader ? 'present' : 'missing')
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Supabase –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞
    const cookieStore = await cookies()
    console.log('üç™ Cookies available:', cookieStore.getAll().map(c => c.name))
    
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            const cookie = cookieStore.get(name)
            console.log(`üç™ Getting cookie ${name}:`, cookie ? 'found' : 'not found')
            return cookie?.value
          },
          set(name: string, value: string, options: any) {
            // –í API routes –º—ã –Ω–µ –º–æ–∂–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å cookies
            console.log(`üç™ Attempted to set cookie ${name}`)
          },
          remove(name: string, options: any) {
            // –í API routes –º—ã –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª—è—Ç—å cookies
            console.log(`üç™ Attempted to remove cookie ${name}`)
          },
        },
      }
    )
    

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    console.log('üîê Checking authentication...')
    let user = null
    let authError = null
    let authenticatedSupabase = supabase
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å Authorization header, —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7)
      console.log('üîë Creating authenticated client with token, length:', token.length)
      
      authenticatedSupabase = createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
          cookies: {
            get() { return undefined },
            set() {},
            remove() {},
          },
          global: {
            headers: {
              Authorization: `Bearer ${token}`
            }
          }
        }
      )
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–æ–º
      const { data: { user: tokenUser }, error: tokenError } = await authenticatedSupabase.auth.getUser()
      if (tokenUser && !tokenError) {
        console.log('‚úÖ Token authentication successful:', tokenUser.email)
        user = tokenUser
        authError = null
      } else {
        console.log('‚ùå Token authentication failed:', tokenError?.message)
        authError = tokenError
      }
    }
    
          // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∫—É–∫–∏
      if (!user) {
        const { data: { user: supabaseAuth }, error: supabaseError } = await supabase.auth.getUser()
        user = supabaseAuth
        authError = supabaseError
      
      console.log('üë§ Cookie-based User:', user ? `${user.id} (${user.email})` : 'null')
      console.log('‚ùå Cookie-based Auth error:', authError)
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –Ω–æ –µ—Å—Ç—å Authorization header, –ø—Ä–æ–±—É–µ–º JWT –≤–∞–ª–∏–¥–∞—Ü–∏—é
    if (!user && authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7)
      console.log('üîÑ Trying JWT validation as fallback...')
      const jwtUser = await validateJWTToken(token)
      if (jwtUser) {
        console.log('‚úÖ JWT validation successful:', jwtUser.email)
        user = jwtUser
        authError = null
      }
    }

    if (!user || authError) {
      console.log('üö´ Authentication failed - Auth session missing!')
      return NextResponse.json(
      { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
      { status: 401, headers: corsHeaders }
    )
    }

    console.log('‚úÖ User authenticated:', user.email)

    const formData = await request.formData()
    const file = formData.get('file') as File

    if (!file) {
      console.log('üìÅ No file provided')
      return NextResponse.json(
      { error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' },
      { status: 400, headers: corsHeaders }
    )
    }

    console.log('üìÅ File received:', file.name, file.size, file.type)

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    const validation = validateFile(file, { context: 'all' }) // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    if (!validation.valid) {
      console.log('‚ùå File validation failed:', validation.error)
      return NextResponse.json(
        { error: validation.error },
        { status: 400, headers: corsHeaders }
      )
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ Buffer
    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileName = generateFileName(file.name, user.id)
    console.log('üìù Generated filename:', fileName)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
    console.log('‚òÅÔ∏è Uploading to S3...')
    console.log('üìã S3 Config:', {
      endpoint: 'https://s3.timeweb.cloud',
      region: 'ru-1',
      bucket: process.env.TIMEWEB_S3_BUCKET || '5e559db6-b49dc67b-2ab0-4413-9567-c6e34e6a5bd4'
    })
    console.log('üìÅ Upload details:', {
      fileName,
      fileSize: file.size,
      contentType: file.type
    })
    
    try {
      const publicUrl = await uploadFile(buffer, fileName, file.type)
      console.log('‚úÖ Upload successful:', publicUrl)

      return NextResponse.json({
        success: true,
        fileName,
        publicUrl,
        fileSize: file.size,
        fileType: file.type
      }, {
        headers: corsHeaders
      })
    } catch (s3Error) {
      console.error('üí• S3 Upload error:', s3Error)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3: ' + (s3Error instanceof Error ? s3Error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') },
        { status: 500, headers: corsHeaders }
      )
    }

  } catch (error) {
    console.error('üí• Upload error:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞' },
      { status: 500, headers: corsHeaders }
    )
  }
}