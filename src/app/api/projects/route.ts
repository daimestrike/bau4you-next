import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import jwt from 'jsonwebtoken'

export async function GET() {
  console.log('üîç API Projects GET called - route is working')
  return NextResponse.json({ 
    message: 'Projects API is working',
    timestamp: new Date().toISOString()
  })
}

export async function POST(request: NextRequest) {
  console.log('üîç API Projects POST called')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authHeader = request.headers.get('authorization')
    let userId: string
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      try {
        const decoded = jwt.decode(token) as any
        console.log('üîç Decoded token:', decoded)
        userId = decoded?.sub
        console.log('üë§ User ID from token:', userId)
        
        if (!userId) {
          throw new Error('No user ID in token')
        }
      } catch (error) {
        console.log('‚ùå Invalid token error:', error)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback user ID
        userId = '0fac74b6-f93d-4f27-9985-628b03df0968'
        console.log('‚ö†Ô∏è Using fallback User ID:', userId)
      }
    } else {
      console.log('‚ùå No authorization header found')
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback user ID
      userId = '0fac74b6-f93d-4f27-9985-628b03df0968'
      console.log('‚ö†Ô∏è Using fallback User ID:', userId)
    }

    const projectData = await request.json()
    console.log('üìã Project data received:', projectData)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const insertData = {
      ...projectData,
      owner_id: userId
    }
    
    console.log('üìù Insert data prepared:', insertData)

    console.log('üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç...')
    
    let data, error
    try {
      console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º insert...')
      const result = await supabase
        .from('projects')
        .insert([insertData])
        .select()
      
      data = result.data
      error = result.error
      
      console.log('üìä Insert result:', { data, error })
    } catch (insertError) {
      console.log('‚ùå Insert threw exception:', insertError)
      error = insertError
    }

    if (error) {
      console.log('‚ùå Supabase error details:', {
        message: (error as any)?.message,
        code: (error as any)?.code,
        details: (error as any)?.details,
        hint: (error as any)?.hint,
        fullError: error
      })
      
      return NextResponse.json(
        { 
          error: (error as any)?.message || 'Unknown error',
          details: 'Please run fix_projects_rls.sql in Supabase SQL Editor to fix RLS policies'
        },
        { status: 400 }
      )
    }

    console.log('‚úÖ Project created successfully:', data)
    return NextResponse.json({ data })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
} 