const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function runMigration() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã cart_items...')
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlPath = path.join(__dirname, 'create_cart_items_table.sql')
    const sql = fs.readFileSync(sqlPath, 'utf8')
    
    console.log('üìÑ SQL –º–∏–≥—Ä–∞—Ü–∏—è:')
    console.log(sql)
    console.log('\n' + '='.repeat(50) + '\n')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    const { data, error } = await supabase.rpc('exec_sql', { sql_query: sql })
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ —á–∞—Å—Ç—è–º
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ —á–∞—Å—Ç—è–º...')
      
      const commands = sql.split(';').filter(cmd => cmd.trim().length > 0)
      
      for (let i = 0; i < commands.length; i++) {
        const command = commands[i].trim() + ';'
        if (command.length > 1) {
          console.log(`üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${i + 1}/${commands.length}:`)
          console.log(command.substring(0, 100) + '...')
          
          const { error: cmdError } = await supabase.rpc('exec_sql', { sql_query: command })
          
          if (cmdError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, cmdError)
          } else {
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
          }
        }
      }
    } else {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', data)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã cart_items...')
    const { data: tableCheck, error: checkError } = await supabase
      .from('cart_items')
      .select('count(*)')
      .limit(1)
    
    if (checkError) {
      console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ cart_items –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', checkError.message)
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ cart_items —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞!')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã orders
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã orders...')
    const { data: ordersCheck, error: ordersError } = await supabase
      .from('orders')
      .select('buyer_info, delivery_address, message, items')
      .limit(1)
    
    if (ordersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã orders:', ordersError.message)
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
    }
    
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã
async function runMigrationDirect() {
  try {
    console.log('üöÄ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã...')
    
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É cart_items
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã cart_items...')
    const createTableQuery = `
      CREATE TABLE IF NOT EXISTS cart_items (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
        product_id UUID REFERENCES products(id) ON DELETE CASCADE NOT NULL,
        quantity INTEGER NOT NULL DEFAULT 1 CHECK (quantity > 0),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        UNIQUE(user_id, product_id)
      );
    `
    
    const { error: createError } = await supabase.rpc('exec_sql', { sql_query: createTableQuery })
    if (createError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', createError)
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ cart_items —Å–æ–∑–¥–∞–Ω–∞')
    }
    
    // 2. –í–∫–ª—é—á–∞–µ–º RLS
    console.log('üìù –í–∫–ª—é—á–µ–Ω–∏–µ Row Level Security...')
    const { error: rlsError } = await supabase.rpc('exec_sql', { 
      sql_query: 'ALTER TABLE cart_items ENABLE ROW LEVEL SECURITY;' 
    })
    if (rlsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è RLS:', rlsError)
    } else {
      console.log('‚úÖ RLS –≤–∫–ª—é—á–µ–Ω')
    }
    
    // 3. –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏
    const policies = [
      `CREATE POLICY "Users can view own cart items" ON cart_items FOR SELECT USING (auth.uid() = user_id);`,
      `CREATE POLICY "Users can insert own cart items" ON cart_items FOR INSERT WITH CHECK (auth.uid() = user_id);`,
      `CREATE POLICY "Users can update own cart items" ON cart_items FOR UPDATE USING (auth.uid() = user_id);`,
      `CREATE POLICY "Users can delete own cart items" ON cart_items FOR DELETE USING (auth.uid() = user_id);`
    ]
    
    for (const policy of policies) {
      const { error: policyError } = await supabase.rpc('exec_sql', { sql_query: policy })
      if (policyError && !policyError.message.includes('already exists')) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏:', policyError)
      }
    }
    console.log('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã')
    
    // 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    const indexes = [
      `CREATE INDEX IF NOT EXISTS idx_cart_items_user_id ON cart_items(user_id);`,
      `CREATE INDEX IF NOT EXISTS idx_cart_items_product_id ON cart_items(product_id);`,
      `CREATE INDEX IF NOT EXISTS idx_cart_items_created_at ON cart_items(created_at);`
    ]
    
    for (const index of indexes) {
      const { error: indexError } = await supabase.rpc('exec_sql', { sql_query: index })
      if (indexError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞:', indexError)
      }
    }
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã')
    
    // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É orders
    const orderUpdates = [
      `ALTER TABLE orders ADD COLUMN IF NOT EXISTS buyer_info JSONB;`,
      `ALTER TABLE orders ADD COLUMN IF NOT EXISTS delivery_address TEXT;`,
      `ALTER TABLE orders ADD COLUMN IF NOT EXISTS message TEXT;`,
      `ALTER TABLE orders ADD COLUMN IF NOT EXISTS items JSONB;`
    ]
    
    for (const update of orderUpdates) {
      const { error: updateError } = await supabase.rpc('exec_sql', { sql_query: update })
      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è orders:', updateError)
      }
    }
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const { data: finalCheck, error: finalError } = await supabase
      .from('cart_items')
      .select('count(*)')
      .limit(1)
    
    if (finalError) {
      console.error('‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', finalError)
    } else {
      console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n')

runMigrationDirect()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  }) 