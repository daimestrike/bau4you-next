import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseKey)

async function testDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É company_followers
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É company_followers...')
    const { data: followers, error: followersError } = await supabase
      .from('company_followers')
      .select('*')
      .limit(5)
    
    if (followersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ company_followers:', followersError.message)
      if (followersError.message.includes('does not exist')) {
        console.log('üí° –¢–∞–±–ª–∏—Ü–∞ company_followers –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é SQL —Å–∫—Ä–∏–ø—Ç–∞.')
      }
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ company_followers —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', followers.length)
      if (followers.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:', followers)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É companies
    console.log('\nüè¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É companies...')
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, name')
      .limit(5)
    
    if (companiesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ companies:', companiesError.message)
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ companies —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π:', companies.length)
      if (companies.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:', companies)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É profiles
    console.log('\nüë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É profiles...')
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, name_first, name_last')
      .limit(5)
    
    if (profilesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ profiles:', profilesError.message)
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ profiles —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π:', profiles.length)
      if (profiles.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:', profiles)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...')
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (authError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', authError.message)
    } else if (user) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email)
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

testDatabase()