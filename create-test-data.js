import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseKey)

async function createTestData() {
  console.log('üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
    const { data: users } = await supabase
      .from('profiles')
      .select('id')
      .limit(1)
    
    const { data: companies } = await supabase
      .from('companies')
      .select('id')
      .limit(3)
    
    if (!users || users.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      return
    }
    
    if (!companies || companies.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      return
    }
    
    const userId = users[0].id
    console.log('üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId)
    console.log('üè¢ –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π:', companies.length)
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
    for (const company of companies) {
      console.log(`üìù –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é: ${company.id}`)
      
      const { data, error } = await supabase
        .from('company_followers')
        .insert({
          user_id: userId,
          company_id: company.id
        })
        .select()
      
      if (error) {
        if (error.message.includes('duplicate key')) {
          console.log(`‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: ${company.id}`)
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}`)
        }
      } else {
        console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: ${company.id}`)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏...')
    const { data: followers, error: followersError } = await supabase
      .from('company_followers')
      .select(`
        company_id,
        companies (
          id,
          name
        )
      `)
      .eq('user_id', userId)
    
    if (followersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:', followersError.message)
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫:', followers.length)
      followers.forEach(follower => {
        console.log(`  - ${follower.companies?.name} (${follower.company_id})`)
      })
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

createTestData()