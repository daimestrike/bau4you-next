const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://gcbwqqwmqjolxxrvfbzz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdjYndxcXdtcWpvbHh4cnZmYnp6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4ODA2OTUsImV4cCI6MjA2NDQ1NjY5NX0.l4MmmUaF6YmNRRcorzdx_YdgQZerqqoS86N_T3TX7io';

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugRegionIssue() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å region_id...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã:');
    const { data: regions, error: regionsError } = await supabase
      .from('regions')
      .select('*');
    
    if (regionsError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤:', regionsError);
      return;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: ${regions?.length || 0}`);
    if (regions && regions.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–µ 5 —Ä–µ–≥–∏–æ–Ω–æ–≤:');
      regions.slice(0, 5).forEach(region => {
        console.log(`  - ID: ${region.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${region.name}`);
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å region_id
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å region_id:');
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, name, region_id')
      .not('region_id', 'is', null)
      .limit(5);
    
    if (companiesError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π:', companiesError);
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π —Å region_id: ${companies?.length || 0}`);
      if (companies && companies.length > 0) {
        companies.forEach(company => {
          console.log(`  - –ö–æ–º–ø–∞–Ω–∏—è: ${company.name}, region_id: ${company.region_id}`);
        });
      }
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º region_id
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º region_id:');
    if (regions && regions.length > 0) {
      const testRegionId = regions[0].id;
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º region_id: ${testRegionId}`);
      
      const testCompanyData = {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏',
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        type: 'contractor',
        region_id: testRegionId,
        owner_id: 'c40c0f54-d956-417f-9b1e-ace247cb4ddc' // –∏–∑–≤–µ—Å—Ç–Ω—ã–π user_id
      };
      
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏:', testCompanyData);
      
      const { data: testResult, error: testError } = await supabase
        .from('companies')
        .insert([testCompanyData])
        .select();
      
      if (testError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏:', testError);
        console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', testError.code);
        console.error('–î–µ—Ç–∞–ª–∏:', testError.details);
        console.error('–ü–æ–¥—Å–∫–∞–∑–∫–∞:', testError.hint);
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', testResult);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
        if (testResult && testResult.length > 0) {
          const { error: deleteError } = await supabase
            .from('companies')
            .delete()
            .eq('id', testResult[0].id);
          
          if (deleteError) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏:', deleteError);
          } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞');
          }
        }
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã companies
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã companies:');
    const { data: schema, error: schemaError } = await supabase
      .rpc('get_table_schema', { table_name: 'companies' })
      .single();
    
    if (schemaError) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É —á–µ—Ä–µ–∑ RPC, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±...');
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ö–µ–º—É
      const { data: columns, error: columnsError } = await supabase
        .from('information_schema.columns')
        .select('column_name, data_type, is_nullable')
        .eq('table_name', 'companies')
        .eq('table_schema', 'public');
      
      if (columnsError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö');
      } else {
        console.log('–ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã companies:');
        columns?.forEach(col => {
          console.log(`  - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
        });
      }
    } else {
      console.log('–°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã:', schema);
    }
    
  } catch (err) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  }
}

debugRegionIssue();